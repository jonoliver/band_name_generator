random = require './random_words'
_ = require('underscore')

# `r` is a proxy object for `random` so that we can intercept the output
r = {};
Object.keys(random).forEach (method) ->
  # capital the words by default
  r[method] = -> _(random[method].apply(random, arguments)).cap()

NameTypes =
  verber:                   -> "#{r.Verber()}"
  noun_verber:              -> "#{r.ShortNoun()}#{r.Verber().toLowerCase()}"
  noun_noun:                -> "#{r.ShortNoun()}#{r.ShortNoun().toLowerCase()}"
  of_noun_and_noun:         -> "Of #{r.PluralNoun()} And #{r.PluralNoun()}"
  as_the_nouns_verb:        -> "As #{r.Random_The()}#{r.PluralNoun()} #{r.Verb()}"
  when_the_nouns_verb:      -> "When #{r.Random_The()}#{r.PluralNoun()} #{r.Verb()}"
  a_noun_to_verb:           -> "#{r.An_A r.SingularNoun()} To #{r.Verb()}"
  noun_of_the_noun:         -> "#{r.Noun()} Of #{r.Random_The()}#{r.Noun()}"
  verber_of_the_noun:       -> "#{r.Verber()} Of #{r.Random_The()}#{r.Noun()}"
  verb_the_noun:            -> "#{r.Verb()} The #{r.Noun()}"
  gerund_the_noun:          -> "#{r.Gerund()} The #{r.Noun()}"
  the_gerund_noun:          -> "#{r.Random_The()}#{r.Gerund()} #{r.Noun()}"
  the_adjective_noun:       -> "#{r.Random_The()}#{r.Adjective()} #{r.Noun()}"
  allit_adjective_noun:     -> n=r.Noun(); "#{r.Alliteration n, r.Adjective} #{n}"
  allit_noun_noun:          -> n=r.ShortNoun(); "#{r.Alliteration n, r.ShortNoun} #{n}"
  short_allit_noun_noun:    -> n=r.ShortNoun(); "#{r.Alliteration n, r.TinyNoun}#{n.toLowerCase()}"
  preposition_the_noun:     -> "#{r.Preposition()} The #{r.Noun()}"
  preposition_my_noun:      -> "#{r.Preposition()} My #{r.Noun()}"
  preposition_nouns:        -> "#{r.Preposition()} #{r.PluralNoun()}"
  preposition_this_noun:    -> "#{r.Preposition()} This #{r.SingularNoun()}"
  preposition_these_nouns:  -> "#{r.Preposition()} These #{r.PluralNoun()}"
  gerund_preposition_nouns: -> "#{r.Gerund()} #{r.Preposition()} #{r.PluralNoun()}"
  with_nouns_we_verb:       -> "With #{r.PluralNoun()} We #{r.Verb()}"
  from_nouns:               -> "From #{r.PluralNoun()}"

RandomName = ->
  pattern = _(Object.keys(NameTypes)).sample()
  NameTypes[pattern]()

module.exports =
  RandomName: -> RandomName()

  RandomNames: (limit=10) ->
    _([1..limit]).map -> RandomName()

  RandomizeAll: ->
    _(_.shuffle(Object.keys(NameTypes))).map (key) -> NameTypes[key]()
